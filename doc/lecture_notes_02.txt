Overview
* Links to resources referenced or used in class
http://clojure.org/cheatsheet
http://tryclj.com/
http://clojurekoans.com/
http://www.braveclojure.com/
https://github.com/ring-clojure/ring
https://github.com/weavejester/compojure
https://github.com/cgrand/enlive

* Language Basics
** Special Forms
** Conditionals
** Functions

* Featured Project
** Building a simple website using Ring Compojure and Enlive

Go write something - Anything! Lets get started

* Start a REPL for todays interactive lession

We use the term form to refer to structurally valid code.

* Special Forms
The main feature which makes special forms "special" is that they don't always evaluate all of their operands, unlike function calls.

(if boolean-form
  then-form
  optional-else-form)

(if good-mood
  (tweet walking-on-sunshine-lyrics)
  (tweet mopey-country-song-lyrics))

Symbols are identifiers that are normally used to refer to something

Every programming language allows association between a name with a value.
Big difference with Lisps, however, allow manipulation symbols as data.
This is used a lot in  macros.
Functions can return symbols and take them as arguments:



* Functions
Function definitions are comprised of five main parts:
** defn
** A name
** (Optional) a docstring
** Parameters
*** None
*** specified
*** optional
*** keys
*** rest
** Destructuring Parameters
The basic idea behind destructuring is that it lets you concisely bind symbols to values within a collection. Let's look at a basic example:

;; Return the first element of a collection
(defn my-first
  [[first-thing]] ; Notice that first-thing is within a vector
  first-thing)

(my-first ["oven" "bike" "waraxe"])
; => "oven"
Here's how you would accomplish the same thing without destructuring:

(defn my-other-first
  [collection]
  (first collection))
(my-other-first ["nickel" "hair"])
; => "nickel"

As you can see, the my-first associates the symbol first-thing with the first element of the vector that was passed in as an argument. You tell my-first to do this by placing the symbol first-thing within a vector.

That vector is like a huge sign held up to Clojure which says, "Hey! This function is going to receive a list or a vector or a set as an argument. Make my life easier by taking apart the argument's structure for me and associating meaningful names with different parts of the argument!"

(defn chooser
  [[first-choice second-choice & unimportant-choices]]
  (println (str "Your first choice is: " first-choice))
  (println (str "Your second choice is: " second-choice))
  (println (str "We're ignoring the rest of your choices. "
                "Here they are in case you need to cry over them: "
                (clojure.string/join ", " unimportant-choices))))
(chooser ["Marmalade", "Handsome Jack", "Pigpen", "Aquaman"])

You can also destructure maps. In the same way that you tell Clojure to destructure a vector or list by providing a vector as a parameter, you destucture maps by providing a map as a parameter:

(defn announce-treasure-location
  [{lat :lat lng :lng}]
  (println (str "Treasure lat: " lat))
  (println (str "Treasure lng: " lng)))
(announce-treasure-location {:lat 28.22 :lng 81.33})
; =>
; Treasure lat: 28.22
; Treasure lng: 81.33
Let's look more at this line:

[{lat :lat lng :lng}]

We often want to just take keywords and "break them out" of a map, so there's a shorter syntax for that:

;; Works the same as above.
(defn announce-treasure-location
  [{:keys [lat lng]}]
  (println (str "Treasure lat: " lat))
  (println (str "Treasure lng: " lng)))
You can retain access to the original map argument by using the :as keyword. In the example below, the original map is accessed with treasure-location:

;; Works the same as above.
(defn receive-treasure-location
  [{:keys [lat lng] :as treasure-location}]
  (println (str "Treasure lat: " lat))
  (println (str "Treasure lng: " lng))

  ;; One would assume that this would put in new coordinates for your ship
  (steer-ship! treasure-location))

In general, you can think of destructuring as instructing Clojure how to associate symbols with values in a list, map, set, or vector.

** Arity
Functions can also be overloaded by arity. This means that a different function body will run depending on the number of arguments passed to a function.

(defn multi-arity
  ;; 3-arity arguments and body
  ([first-arg second-arg third-arg]
     (do-things first-arg second-arg third-arg))
  ;; 2-arity arguments and body
  ([first-arg second-arg]
     (do-things first-arg second-arg))
  ;; 1-arity arguments and body
  ([first-arg]
     (do-things first-arg)))

** The function body

Your function body can contain any forms. Clojure automatically returns the last form evaluated:

** Anonymous Functions
*** fn
*** #(% )

;; This looks a lot like defn, doesn't it?
(fn [param-list]
  function body)

;; Example
(map (fn [name] (str "Hi, " name))
     ["Darth Vader" "Mr. Magoo"])
; => ("Hi, Darth Vader" "Hi, Mr. Magoo")

;; Another example
((fn [x] (* x 3)) 8)
; => 24

;; Whoa this looks weird.
#(* % 3)

;; Apply this weird looking thing
(#(* % 3) 8)
; => 24

;; Another example
(map #(str "Hi, " %)
     ["Darth Vader" "Mr. Magoo"])
; => ("Hi, Darth Vader" "Hi, Mr. Magoo")

* Let

* Loop and Recur

* Regexs
;; pound, open quote, close quote
#"regular-expression"

(defn has-matching-part?
  [part]
  (re-find #"^left-" (:name part)))
(has-matching-part? {:name "left-eye"})
; => true
(has-matching-part? {:name "neckbeard"})
; => false

* Reduce
The pattern of "process each element in a sequence and build a result" is so common that there's a function for it: reduce.

;; sum with reduce
(reduce + [1 2 3 4])
; => 10

(reduce + 15 [1 2 3 4])


* Basic Lein Project
** Github
* Expectations
* Add Ring and enlive
* Create MVC Style artifacts
** handler
Wire the high level components of the application together
** server
Application service functionality
** route
Aggregate together the routes
** site controller
feed data to the view function to render into HTML
** host_dom view
**** snippets
**** templates
** resources/templates/html
